#! /usr/bin/env ruby

require 'httparty'
require 'json'
require 'colorize'
require 'fileutils'

@packages = {}
@assets_path = "/app/assets"

DEBUG = false
ASSET_TYPES = [:javascripts, :stylesheets, :images, :fonts]

def process_command
  command = ARGV[0].strip.downcase.to_sym
  pkg_names = ARGV[1]
  if pkg_names.nil?
    pkgs = nil
  else
    pkgs = pkg_names.split(" ").collect{|pkg| pkg.strip.downcase}
  end

  load_asset_file
  configure_packages

  case command
  when :install
    download_packages(pkgs)
    update_manifests
  when :manifests
    update_manifests
  when :clean
    clean_packages(pkgs)
  end
end

def update_manifests
  build_javascript_manifest
  build_stylesheet_manifest
  build_initializer
end

def load_asset_file
  fn = "#{Dir.pwd}/Assetfile"
  if File.exist?(fn)
    load fn
  else
    puts "No Assetfile found in the current directory.".red
    exit
  end
end

def configure_packages
  @packages.each do |name, opts|
    opts[:path] = File.expand_path(opts[:path]) if opts[:path]
    opts[:paths] = {}
    opts[:paths][:javascripts] = File.join(Dir.pwd, @assets_path, "javascripts", "ramba", opts[:name])
    opts[:paths][:stylesheets] = File.join(Dir.pwd, @assets_path, "stylesheets", "ramba", opts[:name])
    opts[:paths][:images] = File.join(Dir.pwd, @assets_path, "images", "ramba", opts[:name])
    opts[:paths][:fonts] = File.join(Dir.pwd, @assets_path, "fonts", "ramba", opts[:name])
    opts[:javascripts] ||= []
    opts[:stylesheets] ||= []
    opts[:images] ||= []
    opts[:fonts] ||= []
    opts[:javascripts] << opts[:javascript] if opts[:javascript]
    opts[:stylesheets] << opts[:stylesheet] if opts[:stylesheet]
    opts[:module] ||= 'index'

    # use bower
    if opts[:use_bower].nil?
      if opts[:path_mode] == :live
        opts[:use_bower] = false
      elsif (!opts[:github].nil? || !opts[:path].nil? || !opts[:repo_url].nil?)
        opts[:use_bower] = true
      end
    end

    # preprocess any included files
    ASSET_TYPES.each do |type|
      opts[type] = opts[type].collect{|fp| expand_file_meta(fp)}
    end
  end
end

def download_packages(pkgs=nil)
  @packages.each do |name, opts|
    next if pkgs && !pkgs.include?(name)
    download_package(opts)
    return if DEBUG
  end
end

def clean_packages(pkgs=nil)
  @packages.each do |name, opts|
    next if pkgs && !pkgs.include?(name)
    clean_package(opts)
  end
end

def download_package(opts)
  puts "Installing #{opts[:name]}...".yellow
  clean_package(opts)

  if opts[:github]
    opts[:repo_url] = "https://raw.github.com/#{opts[:github]}/#{opts[:tag] || opts[:branch] || "master"}"
  elsif opts[:path]
    opts[:repo_url] = opts[:path]
  end

  # do nothing if live mode, will be handled by init file and manifests
  if opts[:path_mode] == :live
    return
  end

  if opts[:use_bower] == true
    fetch_config(opts)
    parse_package_files(opts)
  end
  install_package_files(opts)
end

def clean_package(opts)
  opts[:paths].each do |key, path|
    FileUtils.remove_dir(path) if File.exists?(path)
  end
end

def fetch_config(opts, config_fn="bower.json")
  opts[:bower_url] = "#{opts[:repo_url]}/#{config_fn}"
  # get bower config
  body = fetch_text(opts[:bower_url])
  if !body.nil?
    bower = JSON.parse(body)
    puts bower if DEBUG
    opts[:bower] = bower
  elsif config_fn == "bower.json"
    puts "Could not fetch Bower file (#{config_fn}).".red
    fetch_config(opts, "component.json")
  else
    puts "Could not fetch Bower file (#{config_fn}).".red
    opts[:status] = :error
    return
  end
end

# determine which included files are javascripts, stylesheets, fonts, images
def parse_package_files(opts)
  rel_fns = opts[:bower]["main"]
  rel_fns = [rel_fns] if rel_fns.is_a?(String)
  rel_fns.each do |rf|
    fp = "#{opts[:repo_url]}/#{rf}".gsub("/./", "/")
    fo = expand_file_meta(fp)
    ft = fo[:type]
    # check if file excluded
    if !opts[:exclude].nil?
      if File.fnmatch?(opts[:exclude], fo[:base])
        puts "Excluding #{fo[:base]}".red
        next
      end
    end
    case ft
    when :javascript
      opts[:javascripts] << fo
    when :stylesheet
      opts[:stylesheets] << fo
    when :image
      opts[:images] << fo
    when :font
      opts[:fonts] << fo
    else
      puts "Could not determine type of file #{fp}. Placing in images...".red
      opts[:images] << fo
    end
  end
end

def install_package_files(opts)
  ASSET_TYPES.each do |asset_type|
    out_dir = opts[:paths][asset_type]
    FileUtils.remove_dir(out_dir) if File.directory?(out_dir)

    files = opts[asset_type]
    next if files.empty?
    puts "+ #{files.count} #{asset_type}"

    # init dirs
    FileUtils.mkdir_p(out_dir)

    # install files
    files.each do |fo|
      file = fo[:path]
      base = fo[:base]
      out_file = "#{out_dir}/#{base}"
      puts file if DEBUG
      print "  - #{base}... "
      if copy_file(file, out_file, {link: (opts[:path_mode] == :link)})
        puts "done".green
        fo[:state] = :installed
      else
        puts "error".red
        fo[:state] = :error
      end
    end

  end

  # build javascript manifest
  build_package_javascript_manifest(opts)
  build_package_stylesheet_manifest(opts)
end

## MANIFESTS

def build_package_javascript_manifest(opts)
  return if opts[:javascripts].empty?
  print "- building package javascript manifest... "

  str = ""
  opts[:javascripts].each do |fo|
    next if fo[:state] == :error
    str << "//= require ./#{fo[:base]}\n"
  end
  man_fn = File.join(opts[:paths][:javascripts], "asset-manifest.js")
  File.open(man_fn, "w") {|f| f.write str}
  puts "done".green
end

def build_package_stylesheet_manifest(opts)
  return if opts[:stylesheets].empty?
  print "- building package stylesheet manifest... "

  str = "/*\n"
  opts[:stylesheets].each do |fo|
    next if fo[:state] == :error
    str << "*= require ./#{fo[:base]}\n"
  end
  str << "*/"
  man_fn = File.join(opts[:paths][:stylesheets], "asset-manifest.css")
  File.open(man_fn, "w") {|f| f.write str}
  puts "done".green

end

def build_javascript_manifest
  print "Building javascript manifest... ".yellow
  man_dir = File.join(Dir.pwd, @assets_path, "javascripts", "ramba")
  FileUtils.mkdir_p man_dir

  mfs = {}
  @packages.each do |name, opts|
    mdl = opts[:module]
    mfs[mdl] ||= "// Ramba Javascript Manifest\n"
    str = mfs[mdl]
    if opts[:path_mode] == :live
      str << "//= require #{name}\n"
    else
      # check if manifest file exists
      pfn = File.join(opts[:paths][:javascripts], "asset-manifest.js")
      if File.exists? pfn
        str << "//= require ./#{name}/asset-manifest\n"
      end
    end
  end
  mfs.each do |mdl, str|
    man_fn = File.join(man_dir, "#{mdl}.js")
    File.open(man_fn, "w") {|f| f.write str}
  end
  puts "done".green
end

def build_stylesheet_manifest
  print "Building stylesheet manifest... ".yellow
  man_dir = File.join(Dir.pwd, @assets_path, "stylesheets", "ramba")
  FileUtils.mkdir_p man_dir

  mfs = {}
  @packages.each do |name, opts|
    mdl = opts[:module]
    mfs[mdl] ||= "/* Ramba Stylesheet Manifest\n"
    str = mfs[mdl]
    if opts[:path_mode] == :live
      str << "*= require #{name}\n" if File.directory?(File.join(opts[:path], "src", "stylesheets"))
    else
      # check if manifest file exists
      pfn = File.join(opts[:paths][:stylesheets], "asset-manifest.css")
      if File.exists? pfn
        str << "*= require ./#{name}/asset-manifest\n"
      end
    end
  end
  mfs.each do |mdl, str|
    str << "*/"
    man_fn = File.join(man_dir, "#{mdl}.css")
    File.open(man_fn, "w") {|f| f.write str}
  end
  puts "done".green
end

def build_initializer
  # delete existing initializer
  init_fn = File.join(Dir.pwd, "config", "initializers", "ramba.rb")
  File.delete(init_fn) if File.exists?(init_fn)

  str = ""
  @packages.each do |name, opts|
    if opts[:path_mode] == :live
      str << "# #{opts[:name]}\n"
      # add directories to sprockets
      %w{javascripts stylesheets images fonts}.each do |dir|
        path = File.join(opts[:path], "src", dir)
        next if !File.directory?(path)
        str << "Rails.application.config.assets.paths << '#{path}'\n"
      end
    end
  end

  if str.length > 0
    File.open(init_fn, "w") {|f| f.write(str)}
    puts "Initializer written. Remember to restart your Rails server.".green
  end
end

## HELPER METHODS

def parse_file_type(fn)
  ext = File.extname(fn).downcase
  js_exts = [".js", ".coffee"]
  css_exts = [".css", ".sass", ".scss", ".less"]
  img_exts = [".jpg", ".jpeg", ".gif", ".png", ".tiff", ".tif"]
  font_exts = [".eot", ".svg", ".ttf", ".woff"]
  if js_exts.include? ext
    return :javascript
  elsif css_exts.include? ext
    return :stylesheet
  elsif img_exts.include? ext
    return :image
  elsif font_exts.include? ext
    return :font
  end
end

# works for both online and offline files
def fetch_text(url)
  if is_local?(url)
    puts "File #{url} is local" if DEBUG
    if File.exists?(url)
      return File.read(url)
    else
      return nil
    end
  else
    resp = HTTParty.get(url)
    if resp.code.to_i == 200
      return resp.body
    else
      return nil
    end
  end
end

def copy_file(from, to, opts={link: false})
  if is_local?(from)
    if opts[:link]
      FileUtils.ln_s(from, to)
    else
      FileUtils.copy_file(from, to)
    end
    return true
  else
    resp = HTTParty.get(from)
    if resp.code.to_i == 200
      File.open(to, "wb") do |f|
        f.write resp.body
      end
      return true
    else
      return false
    end
  end
end

def is_local?(url)
  url.strip.downcase.match(/^http/) == nil
end

def expand_file_meta(url)
  {path: url, base: File.basename(url), type: parse_file_type(url)}
end

## DSL METHODS

def package(name, opts={}, &block)
  name = name.to_s.strip.downcase
  opts[:name] = name
  @packages[name] = opts
end

process_command
